<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NKCTF</title>
    <link href="/2023/07/24/NKCTF/"/>
    <url>/2023/07/24/NKCTF/</url>
    
    <content type="html"><![CDATA[<p>ÂØÜÁ†Å‰∫∫ÔºåÂØÜÁ†ÅÈ≠ÇÔºåÂØÜÁ†ÅÈÉΩÊòØ‰∫∫‰∏ä‰∫∫</p><h2 id="ÂâçË®Ä"><a href="#ÂâçË®Ä" class="headerlink" title="ÂâçË®Ä"></a>ÂâçË®Ä</h2><p>ÂΩìÊó∂Êúâ‰∫õËèúÔºåÊâÄ‰ª•Âè™ÂÜôÂá∫‰∫ÜÂõõ‰∏™È¢òÂ∞±Ê∫ú‰∫Ü„ÄÇÊó∂ÈöîÂ§öÊó•Êù•Â§çÁé∞‰∏Ä‰∏ã<code>NKCTF</code>ÔºåÂÜç‰πü‰∏çÂºÄÊëÜ‰∫Üüò±</p><h2 id="‰ª•‰∏ãÊòØÂ§çÁé∞ÂÜÖÂÆπ"><a href="#‰ª•‰∏ãÊòØÂ§çÁé∞ÂÜÖÂÆπ" class="headerlink" title="‰ª•‰∏ãÊòØÂ§çÁé∞ÂÜÖÂÆπ"></a>‰ª•‰∏ãÊòØÂ§çÁé∞ÂÜÖÂÆπ</h2><h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><h4 id="È¢òÁõÆ"><a href="#È¢òÁõÆ" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>nbit = <span class="hljs-number">512</span><br>flag=<span class="hljs-string">&#x27;****************************&#x27;</span><br><br>p=getPrime(nbit)<br>q=getPrime(nbit)<br>e=<span class="hljs-number">65537</span><br>n=p*q<br>m= bytes_to_long(<span class="hljs-built_in">bytes</span>(flag.encode()))<br>P = <span class="hljs-built_in">pow</span>(m,p,n)<br>Q = <span class="hljs-built_in">pow</span>(m,q,n)<br>N=P*Q<br>phi_N=(P-<span class="hljs-number">1</span>)*(Q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi_N)<br>dP=d%(P-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n = &#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N = &#x27;</span>,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dP = &#x27;</span>,dP)<br>n =  <span class="hljs-number">114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641</span><br>N =  <span class="hljs-number">1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028</span><br>dP =  <span class="hljs-number">33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263</span><br></code></pre></td></tr></table></figure><h4 id="È¢òËß£"><a href="#È¢òËß£" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>Â∑≤Áü•dPÔºåÁõ¥Êé•ÊùøÂ≠êÔºåÂæóÂà∞PÔºåQ&#x3D;N&#x2F;&#x2F;P<br>$$<br>P\equiv m^{p} <del>mod</del>n\Longrightarrow P\equiv m^{p}<del>mod</del>p\ P\equiv m+k_{1}*p\ÂêåÁêÜÂèØÂæóQ<del>&#x3D;</del>m+k_{2} <em>q\P</em>Q\equiv -m^{2}+(P+Q)*m<del>(mod</del>n)<br>$$<br>Â∑≤Áü•Â§öÈ°πÂºèÂèØÂà©Áî®copperËß£Âæóm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sage"># sage<br>from Crypto.Util.number import *<br><br>e = 65537<br>N =  1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028<br>dp =  33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263<br>n =  114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641<br><br><br>for a in range(1, e+1):<br>    if (dp*e-1) % a == 0:<br>        if N % ((dp*e-1) // a + 1) == 0: <br>            P = (dp*e-1) // a + 1<br>            Q = N // P<br>            break<br>    else:<br>        a += 1<br>        <br>PR.&lt;m&gt; = PolynomialRing(Zmod(n))<br>f = P*Q+m^2+-(P+Q)*m<br>f = f.monic()<br>m = f.small_roots(X=2^300, beta=0.4)<br>flag = long_to_bytes(int(m[0]))<br>print(flag)  <br># NKCTF&#123;Th1S_a_babyRSA_y0u_are_tql!!!&#125;<br></code></pre></td></tr></table></figure><h3 id="ez-math"><a href="#ez-math" class="headerlink" title="ez_math"></a>ez_math</h3><h4 id="È¢òÁõÆ-1"><a href="#È¢òÁõÆ-1" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">from Crypto.Util.number import getPrime, bytes_to_long<br>from secret import BITS, hints, flag<br><br>p = getPrime(BITS)<br>q = getPrime(BITS)<br>n = p * q<br>print(f&#x27;n = &#123;n&#125;&#x27;)<br><br>e = 0x10001<br>c = pow(bytes_to_long(flag), e, n)<br>print(f&#x27;c = &#123;c&#125;&#x27;)<br><br>print(&#x27;Give you some boring pows:&#x27;)<br>for i in range(len(hints)):<br>    print(hints[i])<br><br>&quot;&quot;&quot;<br>n = 369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621<br>c = 324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043<br>Give you some boring pows:<br>pow(6, 42762902032363446334121451790132830028099011269558028556333775251728898854654431095595000922138958455510196735338223430882428451914478079186797153527810555787441234842366353864053114538165236037883914332840687123514412294276743506313011532002136735343280737244020115917460801848337792582496228600926958548903290, n) = 4<br>pow(6, 141997416965295486849546892322458652502850390670128808480582247784728456230996812361056958004801816363393016360646922983916999235770803618904474553309200419301820603229504955218189709387942156848904968053547462302189568831762401075340100029630332409419313772378068180267756675141584884876543484516408660699471038, n) = 9<br>pow(6, 163378867981477210016607618217525067516899896304907822758749135410592905658324027908854458465871295591148114728316034699358213461728042658497873130073105697195541220650688132150216266657024774867846925219967805863946774978900772828496605795631400777090954141000078238226487076065753781167791598816872139973922682, n) = 3<br>pow(5, 101651508435846472131121026992982127175369332865677196032272241712711171024515826370577416844824734811581351106736224929238579734879671732717639124571916168742336862493284572465162318403582113621582374924091725060981390318743531229548188092491836655143124663368239422819562367919547196053790207486164506763679128, n) = 4<br>pow(8, 7202269322818255506843028035725052687541091567764933235328308385449791332345247877549905289072216053144576876979686287212194040101112899704499548530779540409356827298148385589812450437990490353926475147376495772639210184768544932563432306664067058309318707174880146258394471096033723193568453520897758319446472, n) = 3<br>pow(6, 64144353048545169501182177685199245042148516904337042834500662877593348281981646643392501383208437683265295103007335146323642677871717118780195730291715833681161852263549530796079671807247854056825871499261030685271618441415115259469517298003205103014921105866030173876191202772506688873744342901390437823354935, n) = 8<br>pow(6, 21381451016181723167060725895066415014049505634779014278166887625864449427327215547797500461069479227755098367669111715441214225957239039593398576763905277893720617421183176932026557269082618018941957166420343561757206147138371753156505766001068367671640368622010057958730400924168896291248114300463479274451645, n) = 2<br>pow(4, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 9<br>pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339417, n) = 6<br>pow(4, 10803403984227383260264542053587579031311637351647399852992462578174686998517871816324857933608324079716865315469529430818291060151669349556749322796169310614035240947222578384718675656985735530889712721064743658958815277152817398845148459996100587463978060762320219387591706644050584790352680281346637479169708, n) = 3<br>pow(9, 3293982057350410278459882519024200329089724149803879577174733206141551016681048848343176690789446255513117465644006032807116613436995145441651711865811812905401261777042165657533800465011922458688696664211216129846590488003282750224539553623014598025837108471148806368738631086225250952573439068109703953523338, n) = 4<br>pow(2, 43213615936909533041058168214350316125246549406589599411969850312698747994071487265299431734433296318867461261878117723273164240606677398226997291184677242456140963788890313538874702627942942123558850884258974635835261108611269595380593839984402349855912243049280877550366826576202339161410721125386549916678832, n) = 9<br>pow(7, 156359509651684605051402965560382969488421316701585527115005130492947292379802933549188085059602557600903593831240316597311439285149968787780538126741092612405335349622445040578126369183536683733294143156965518222696624206221060030916594302284630706642066420353822195108928341123726471513256217857861184609387726, n) = 9<br>pow(7, 170559914324671769117535654836487226009685359320636182075960576764702323732727088502920021993271666209903403463612731506055433486417625242935904916789051793747298593847158174830184596554822038310041512771676833824200302666130102306284852931958549925702330464987955245647072909056824574486147965487598401928881026, n) = 3<br>pow(8, 123173545998439288789112229408394321687299601293124558024610682024304903390434162304434639284627183212602142063990097609866285125123521132060847804558007316726174558714580872721495215950738261924525921590925432950469320750692763054435407707754979429841729673081392197456811651326615118306026475411557079498916218, n) = 4<br>pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 3<br>pow(3, 6587964114700820556919765038048400658179448299607759154349466412283102033362097696686353381578892511026234931288012065614233226873990290883303423731623625810802523554084331315067600930023844917377393328422432259693180976006565500449079107246029196051674216942297612737477262172450501905146878136219407907046676, n) = 4<br>pow(7, 146900004342901005519726059203387905743111231159623333298786259340649199259667124880775175860427705602975071010583553281005991812801779033020769274211420710213704563866848310994325033574484679477677016014418321661821714582236428708141287327064859146436371562752616380650770729341741997594308364878898526065859626, n) = 4<br>pow(5, 172192380036714150788905270808196199818277334366508682218739812159577144024191963252552116624193235000074634457087111471641800814071769221933018962135503876997163938949365614056098717522475180216291316295788774044033481065993544994610614082708563841846852650913646728169671510827052772868386414581035580266356334, n) = 3<br>pow(8, 68789042322037899901399142739922213531190892214327212247633649397602243027562329029767224931385807659445647908974735092145336602662873465734923450809783198772444106655438821950560058413359621316189435942839212247873870560114926459781136160541556773230183543715576244986800296759341282346581691226676298068904581, n) = 6<br>pow(5, 159624441075769368394142197503800917105605266793330527400563601282696932962732683048452274321445695181246055818189076528484173940458256745774766217433996778905066039826859919029954611118842967545793750205189398662362981005947945407568116603784658538931110792205205160154125544664182868277733116044735541284338342, n) = 9<br>pow(8, 14404538645636511013686056071450105375082183135529866470656616770899582664690495755099810578144432106289153753959372574424388080202225799408999097061559080818713654596296771179624900875980980707852950294752991545278420369537089865126864613328134116618637414349760292516788942192067446387136907041795516638892944, n) = 9<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-1"><a href="#È¢òËß£-1" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>Ê¨ßÊãâÂÆöÁêÜÔºåÊâæÂà∞Áõ∏ÂêåÂ∫ïÊï∞ÔºåÂêå‰ΩôÁöÑÂºèÂ≠êËøõË°åÊé®ÂØº<br>$$<br>x^{2e1} \equiv x^{e2}~mod ~n\2e1-e2&#x3D;k*\varphi (n)<br>$$</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">n = 369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621<br>c = 324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043<br><span class="hljs-attribute">e</span>=65537<br>e1=[<br>170559914324671769117535654836487226009685359320636182075960576764702323732727088502920021993271666209903403463612731506055433486417625242935904916789051793747298593847158174830184596554822038310041512771676833824200302666130102306284852931958549925702330464987955245647072909056824574486147965487598401928881026,<br>163378867981477210016607618217525067516899896304907822758749135410592905658324027908854458465871295591148114728316034699358213461728042658497873130073105697195541220650688132150216266657024774867846925219967805863946774978900772828496605795631400777090954141000078238226487076065753781167791598816872139973922682,<br>21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416<br>]<br>e2=[<br>156359509651684605051402965560382969488421316701585527115005130492947292379802933549188085059602557600903593831240316597311439285149968787780538126741092612405335349622445040578126369183536683733294143156965518222696624206221060030916594302284630706642066420353822195108928341123726471513256217857861184609387726,<br>141997416965295486849546892322458652502850390670128808480582247784728456230996812361056958004801816363393016360646922983916999235770803618904474553309200419301820603229504955218189709387942156848904968053547462302189568831762401075340100029630332409419313772378068180267756675141584884876543484516408660699471038,<br>43213615936909533041058168214350316125246549406589599411969850312698747994071487265299431734433296318867461261878117723273164240606677398226997291184677242456140963788890313538874702627942942123558850884258974635835261108611269595380593839984402349855912243049280877550366826576202339161410721125386549916678832<br>]<br>temp=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(3):<br>¬† ¬† temp.append(2<span class="hljs-number">*e1</span>[i]-e2[i])<br><span class="hljs-attribute">phi</span>=GCD(temp[0],temp[1])<br><span class="hljs-attribute">phi</span>=GCD(phi,temp[2])<br><span class="hljs-attribute">d</span>=gmpy2.invert(e,phi)<br><span class="hljs-attribute">m</span>=pow(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;NKCTF&#123;d15cr373_L0g_15_R3DuC710n_f0R_f4C70r1nG&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Ê≥®ÔºöËøô‰∏™È¢òÂΩìÊó∂Âá∫‰∫ÜÔºàÊúâÂç∞Ë±°ÔºåÂ∞±Áõ¥Êé•ÂÅ∑ËãπÊûúÊ†ëÂ∏àÂÇÖÂçöÂÆ¢ÁöÑ‰ª£Á†ÅÔºâÊúâÁÇπ‰∏çÂ•ΩÊÑèÊÄùhhh"><a href="#Ê≥®ÔºöËøô‰∏™È¢òÂΩìÊó∂Âá∫‰∫ÜÔºàÊúâÂç∞Ë±°ÔºåÂ∞±Áõ¥Êé•ÂÅ∑ËãπÊûúÊ†ëÂ∏àÂÇÖÂçöÂÆ¢ÁöÑ‰ª£Á†ÅÔºâÊúâÁÇπ‰∏çÂ•ΩÊÑèÊÄùhhh" class="headerlink" title="Ê≥®ÔºöËøô‰∏™È¢òÂΩìÊó∂Âá∫‰∫ÜÔºàÊúâÂç∞Ë±°ÔºåÂ∞±Áõ¥Êé•ÂÅ∑ËãπÊûúÊ†ëÂ∏àÂÇÖÂçöÂÆ¢ÁöÑ‰ª£Á†ÅÔºâÊúâÁÇπ‰∏çÂ•ΩÊÑèÊÄùhhh"></a>Ê≥®ÔºöËøô‰∏™È¢òÂΩìÊó∂Âá∫‰∫ÜÔºàÊúâÂç∞Ë±°ÔºåÂ∞±Áõ¥Êé•ÂÅ∑ËãπÊûúÊ†ëÂ∏àÂÇÖÂçöÂÆ¢ÁöÑ‰ª£Á†ÅÔºâÊúâÁÇπ‰∏çÂ•ΩÊÑèÊÄùhhh</h4><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><h4 id="È¢òÁõÆ-2"><a href="#È¢òÁõÆ-2" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br>from secret import flag<br><br>m1 = bytes_to_long(flag[:len(flag)<span class="hljs-comment">//3])</span><br>m2 = bytes_to_long(flag[len(flag)<span class="hljs-comment">//3:])</span><br><br>def gen():<br>    prime_list  = []<br>    for i in range(<span class="hljs-number">4</span>):<br>        prime_list.append(getPrime(<span class="hljs-number">512</span>))<br>    return sorted(prime_list)<br><br>prime_list = gen()<br>p,q,r,t = prime_list[<span class="hljs-number">0</span>],prime_list[<span class="hljs-number">3</span>],prime_list[<span class="hljs-number">1</span>],prime_list[<span class="hljs-number">2</span>]<br>e = <span class="hljs-number">65537</span><br>n = p*q*r*t<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)*(t-<span class="hljs-number">1</span>)<br>c1 = <span class="hljs-built_in">pow</span>(m1,e,p*q)<br>p1 = getPrime(<span class="hljs-number">512</span>)<br>q1 = getPrime(<span class="hljs-number">512</span>)<br>N = p1*q1<br>c2 = <span class="hljs-built_in">pow</span>(m2,p1,N)<br>c3 = <span class="hljs-built_in">pow</span>(m2,q1,N)<br>print(f&#x27;n = &#123;n&#125;&#x27;)<br>print(f&#x27;phi = &#123;phi&#125;&#x27;)<br>print(f&#x27;c1 = &#123;c1&#125;&#x27;)<br>print(f&#x27;N = &#123;N&#125;&#x27;)<br>print(f&#x27;c2 = &#123;c2&#125;&#x27;)<br>print(f&#x27;c3 = &#123;c3&#125;&#x27;)<br>&#x27;&#x27;&#x27;<br>n = <span class="hljs-number">88361302163437</span><span class="hljs-number">08623415307573</span><span class="hljs-number">63033711057336</span><span class="hljs-number">35951887489832</span><span class="hljs-number">90313549413242</span><span class="hljs-number">33214394545291</span><span class="hljs-number">48008452824782</span><span class="hljs-number">16810685733227</span><span class="hljs-number">13791163023980</span><span class="hljs-number">88951967481250</span><span class="hljs-number">78747600505626</span><span class="hljs-number">16566633467510</span><span class="hljs-number">01477905785466</span><span class="hljs-number">82128517668100</span><span class="hljs-number">85876678473335</span><span class="hljs-number">18944801818771</span><span class="hljs-number">44793496927464</span><span class="hljs-number">05832358216541</span><span class="hljs-number">25529709999212</span><span class="hljs-number">15333509253052</span><span class="hljs-number">64402447841739</span><span class="hljs-number">31460004908086</span><span class="hljs-number">39363681195799</span><span class="hljs-number">82654155890652</span><span class="hljs-number">79853361047619</span><span class="hljs-number">74023394438549</span><span class="hljs-number">05580423499765</span><span class="hljs-number">47012669677311</span><span class="hljs-number">37282297623426</span><span class="hljs-number">31821270115741</span><span class="hljs-number">63979991082592</span><span class="hljs-number">57077847307874</span><span class="hljs-number">12273692126559</span><span class="hljs-number">98549768559496</span><span class="hljs-number">80133804464839</span><span class="hljs-number">76847020042566</span><span class="hljs-number">96099968415685</span><span class="hljs-number">45945133611190</span><span class="hljs-number">97981078694324</span><span class="hljs-number">62851030313637</span><span class="hljs-number">90663362165522</span><span class="hljs-number">66282034491705</span><span class="hljs-number">65872447016358</span><span class="hljs-number">31061853354597</span><br>phi = <span class="hljs-number">88361302163437</span><span class="hljs-number">08623415307573</span><span class="hljs-number">63033711057336</span><span class="hljs-number">35951887489832</span><span class="hljs-number">90313549413242</span><span class="hljs-number">33214394545291</span><span class="hljs-number">48008452824782</span><span class="hljs-number">16810685733227</span><span class="hljs-number">13791163023980</span><span class="hljs-number">88951967481250</span><span class="hljs-number">78747600505622</span><span class="hljs-number">50335146156595</span><span class="hljs-number">61060051180295</span><span class="hljs-number">37938273153581</span><span class="hljs-number">67506576201595</span><span class="hljs-number">24836870578054</span><span class="hljs-number">62728186901563</span><span class="hljs-number">99042999891638</span><span class="hljs-number">28205762118874</span><span class="hljs-number">77098611684072</span><span class="hljs-number">56184931498634</span><span class="hljs-number">12269813005963</span><span class="hljs-number">38314989867731</span><span class="hljs-number">72566831205713</span><span class="hljs-number">40752448162231</span><span class="hljs-number">20038573374383</span><span class="hljs-number">94971871454993</span><span class="hljs-number">02610735763915</span><span class="hljs-number">01671722900294</span><span class="hljs-number">33128908282605</span><span class="hljs-number">82925998386315</span><span class="hljs-number">13746370889828</span><span class="hljs-number">02603955524567</span><span class="hljs-number">21958339276092</span><span class="hljs-number">80773258978856</span><span class="hljs-number">66443434922197</span><span class="hljs-number">25686513788080</span><span class="hljs-number">50580665443131</span><span class="hljs-number">00163239517520</span><span class="hljs-number">58040459588461</span><span class="hljs-number">24475183825589</span><span class="hljs-number">67220475289525</span><span class="hljs-number">27231304549518</span><span class="hljs-number">30966138888560</span><br>c1 = <span class="hljs-number">78327207863361</span><span class="hljs-number">01795349612135</span><span class="hljs-number">62211732884228</span><span class="hljs-number">62370301396867</span><span class="hljs-number">34195797908762</span><span class="hljs-number">70119917381760</span><span class="hljs-number">24643637029313</span><span class="hljs-number">96924115162298</span><span class="hljs-number">52265950930798</span><span class="hljs-number">57523487726626</span><span class="hljs-number">88210911413491</span><span class="hljs-number">00566734899164</span><span class="hljs-number">08854152274726</span><span class="hljs-number">72145188425767</span><span class="hljs-number">75335931743717</span><span class="hljs-number">42411008169082</span><span class="hljs-number">36766616898394</span><span class="hljs-number">33588760175217</span><span class="hljs-number">49198218529804</span><span class="hljs-number">83086494027418</span><span class="hljs-number">53605061991164</span><span class="hljs-number">51280975188409</span><br>N = <span class="hljs-number">15720281486656</span><span class="hljs-number">31565131842719</span><span class="hljs-number">57553223260772</span><span class="hljs-number">14184512928371</span><span class="hljs-number">11462043764490</span><span class="hljs-number">01653397810781</span><span class="hljs-number">71793472080404</span><span class="hljs-number">19163331746736</span><span class="hljs-number">56579086498762</span><span class="hljs-number">69398338036552</span><span class="hljs-number">74006045546638</span><span class="hljs-number">73045166444369</span><span class="hljs-number">50488660323327</span><span class="hljs-number">58681926889952</span><span class="hljs-number">84322277504050</span><span class="hljs-number">32292751116058</span><span class="hljs-number">32802690733384</span><span class="hljs-number">15758019142878</span><span class="hljs-number">01608453612974</span><span class="hljs-number">14352213455990</span><span class="hljs-number">28001581385308</span><span class="hljs-number">32440732472535</span>3<br>c2 = <span class="hljs-number">63355788175487</span><span class="hljs-number">22103059631492</span><span class="hljs-number">14074760785920</span><span class="hljs-number">01060627033831</span><span class="hljs-number">69484340963796</span><span class="hljs-number">53504749557273</span><span class="hljs-number">83434406640075</span><span class="hljs-number">12293293955953</span><span class="hljs-number">22166397392944</span><span class="hljs-number">13008164038257</span><span class="hljs-number">33867509432417</span><span class="hljs-number">26347896103072</span><span class="hljs-number">27365830016457</span><span class="hljs-number">71445629339746</span><span class="hljs-number">64458203528047</span><span class="hljs-number">25466971828172</span><span class="hljs-number">01027638761689</span><span class="hljs-number">48293284910682</span><span class="hljs-number">98742711984800</span><span class="hljs-number">90041127755002</span><span class="hljs-number">32205384430141</span><span class="hljs-number">62710037992032</span><br>c3 = <span class="hljs-number">92663340968662</span><span class="hljs-number">07047544089419</span><span class="hljs-number">99447537961996</span><span class="hljs-number">43932069682608</span><span class="hljs-number">75878305040712</span><span class="hljs-number">62959090633007</span><span class="hljs-number">35425757198569</span><span class="hljs-number">65053269812924</span><span class="hljs-number">80881076667407</span><span class="hljs-number">26152705352072</span><span class="hljs-number">84077081944428</span><span class="hljs-number">01139876733097</span><span class="hljs-number">37023051749731</span><span class="hljs-number">48018082513467</span><span class="hljs-number">08008770644351</span><span class="hljs-number">22850986004311</span><span class="hljs-number">36743009829009</span><span class="hljs-number">56706576078694</span><span class="hljs-number">07066270873667</span><span class="hljs-number">02015319792328</span><span class="hljs-number">14197893811150</span><span class="hljs-number">134542693107</span>8<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-2"><a href="#È¢òËß£-2" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>m1Â∑≤Áü•nÂíåphiÔºåÂàÜËß£n<a href="https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.py%E8%BF%99%E4%B8%AA%E6%98%AF%E6%BA%90%E7%A0%81">https://github.com/jvdsn/crypto-attacks/blob/master/attacks/factorization/known_phi.pyËøô‰∏™ÊòØÊ∫êÁ†Å</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> isqrt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorize</span>(<span class="hljs-params">N, phi</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span><br><span class="hljs-string">    This method only works for a modulus consisting of 2 primes!</span><br><span class="hljs-string">    :param N: the modulus</span><br><span class="hljs-string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span><br><span class="hljs-string">    :return: a tuple containing the prime factors, or None if the factors were not found</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    s = N + <span class="hljs-number">1</span> - phi<br>    d = s ** <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * N<br>    p = <span class="hljs-built_in">int</span>(s - isqrt(d)) // <span class="hljs-number">2</span><br>    q = <span class="hljs-built_in">int</span>(s + isqrt(d)) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> p, q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorize_multi_prime</span>(<span class="hljs-params">N, phi</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span><br><span class="hljs-string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span><br><span class="hljs-string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span><br><span class="hljs-string">    :param N: the modulus</span><br><span class="hljs-string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span><br><span class="hljs-string">    :return: a tuple containing the prime factors</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prime_factors = <span class="hljs-built_in">set</span>()<br>    factors = [N]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(factors) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># Element to factorize.</span><br>        N = factors[<span class="hljs-number">0</span>]<br><br>        w = randrange(<span class="hljs-number">2</span>, N - <span class="hljs-number">1</span>)<br>        i = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> phi % (<span class="hljs-number">2</span> ** i) == <span class="hljs-number">0</span>:<br>            sqrt_1 = <span class="hljs-built_in">pow</span>(w, phi // (<span class="hljs-number">2</span> ** i), N)<br>            <span class="hljs-keyword">if</span> sqrt_1 &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sqrt_1 != N - <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># We can remove the element to factorize now, because we have a factorization.</span><br>                factors = factors[<span class="hljs-number">1</span>:]<br><br>                p = gcd(N, sqrt_1 + <span class="hljs-number">1</span>)<br>                q = N // p<br><br>                <span class="hljs-keyword">if</span> isPrime(p):<br>                    prime_factors.add(p)<br>                <span class="hljs-keyword">elif</span> p &gt; <span class="hljs-number">1</span>:<br>                    factors.append(p)<br><br>                <span class="hljs-keyword">if</span> isPrime(q):<br>                    prime_factors.add(q)<br>                <span class="hljs-keyword">elif</span> q &gt; <span class="hljs-number">1</span>:<br>                    factors.append(q)<br><br>                <span class="hljs-comment"># Continue in the outer loop</span><br>                <span class="hljs-keyword">break</span><br><br>            i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(prime_factors)<br><br>n = <span class="hljs-number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505626165666334675100147790578546682128517668100858766784733351894480181877144793496927464058323582165412552970999921215333509253052644024478417393146000490808639363681195799826541558906527985336104761974023394438549055804234997654701266967731137282297623426318212701157416397999108259257077847307874122736921265599854976855949680133804464839768470200425669609996841568545945133611190979810786943246285103031363790663362165522662820344917056587244701635831061853354597</span><br>phi = <span class="hljs-number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505622503351461565956106005118029537938273153581675065762015952483687057805462728186901563990429998916382820576211887477098611684072561849314986341226981300596338314989867731725668312057134075244816223120038573374383949718714549930261073576391501671722900294331289082826058292599838631513746370889828026039555245672195833927609280773258978856664434349221972568651378808050580665443131001632395175205804045958846124475183825589672204752895252723130454951830966138888560</span><br>c1 = <span class="hljs-number">78327207863361017953496121356221173288422862370301396867341957979087627011991738176024643637029313969241151622985226595093079857523487726626882109114134910056673489916408854152274726721451884257677533593174371742411008169082367666168983943358876017521749198218529804830864940274185360506199116451280975188409</span><br>e=<span class="hljs-number">65537</span><br><br>prime_list=<span class="hljs-built_in">sorted</span>(factorize_multi_prime(n,phi))<br>p,q,r,t=prime_list[<span class="hljs-number">0</span>],prime_list[<span class="hljs-number">3</span>],prime_list[<span class="hljs-number">1</span>],prime_list[<span class="hljs-number">2</span>]<br>d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m1=<span class="hljs-built_in">pow</span>(c1,d,p*q)<br><span class="hljs-built_in">print</span>(long_to_bytes(m1))<br><span class="hljs-comment"># b&#x27;NKCTF&#123;it_i5_e45y_th4t_Kn0wn&#x27;</span><br></code></pre></td></tr></table></figure><p>Ê±ÇËß£m2ÂèØ‰ª•Áúã‰∏Ä‰∏ãÂâçÈù¢ÈÇ£‰∏™babyrsaÔºåcopperÁõ¥Êé•Ëß£ÔºåËøôÈáåÂ∞±‰∏çÂÜô‰∫Ü</p><h3 id="real-MT"><a href="#real-MT" class="headerlink" title="real_MT"></a>real_MT</h3><h4 id="È¢òÁõÆ-3"><a href="#È¢òÁõÆ-3" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs scss">import random<br>import signal<br><br>def <span class="hljs-built_in">guess_number_1</span>():<br>    randoms = []<br>    for _ in <span class="hljs-built_in">range</span>(<span class="hljs-number">208</span>):<br>        randoms.<span class="hljs-built_in">append</span>(random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">96</span>))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;randoms = &quot;</span>+<span class="hljs-built_in">str</span>(randoms))<br>    number = <span class="hljs-built_in">str</span>(random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">96</span>))<br>    guess = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Guess after number:&quot;</span>))<br>    if guess != number:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong Number! Guess again.&quot;</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>)<br><br>def <span class="hljs-built_in">guess_number_2</span>():<br>    number = <span class="hljs-built_in">str</span>(random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">96</span>))<br>    randoms = []<br>    for _ in <span class="hljs-built_in">range</span>(<span class="hljs-number">627</span>):<br>        randoms.<span class="hljs-built_in">append</span>(random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">32</span>))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;randoms = &quot;</span>+<span class="hljs-built_in">str</span>(randoms))<br>    guess = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Guess pre number:&quot;</span>))<br>    if guess != number:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong Number! Guess again.&quot;</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>)<br><br>def <span class="hljs-built_in">guess_number_3</span>():<br><br>    def <span class="hljs-built_in">_int32</span>(x):<br>        return <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>xFFFFFFFF &amp; x)  <br>    def <span class="hljs-built_in">init</span>(seed):<br>        mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        mt[<span class="hljs-number">0</span>] = seed<br>        for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            mt[i] = <span class="hljs-built_in">_int32</span>(<span class="hljs-number">1812433253</span> * (mt[i - <span class="hljs-number">1</span>] ^ mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br>        return mt[-<span class="hljs-number">1</span>]<br>    number = random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">32</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;last number = &quot;</span>+ <span class="hljs-built_in">str</span>(<span class="hljs-built_in">init</span>(number)))<br>    guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Guess seed number:&quot;</span>)))<br>    if guess != number:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong Number! Guess again.&quot;</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>)<br><br>def <span class="hljs-built_in">guess_number_4</span>():<br>    def <span class="hljs-built_in">extract_number</span>(y):<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        return y&amp;<span class="hljs-number">0</span>xffffffff<br><br>    number = random.<span class="hljs-built_in">getrandbits</span>(<span class="hljs-number">32</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;extract number = &quot;</span>+ <span class="hljs-built_in">str</span>(<span class="hljs-built_in">extract_number</span>(number)))<br>    guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Guess be extracted number:&quot;</span>)))<br>    if guess != number:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong Number! Guess again.&quot;</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>)<br>    <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the Mersenne Twister basic challenge. Please try to solve 20 challenges in 60 seconds.&quot;</span>)<br>signal.<span class="hljs-built_in">alarm</span>(<span class="hljs-number">60</span>)<br><br>for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Round: &quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>))<br>    random.<span class="hljs-built_in">choice</span>([guess_number_1,guess_number_2,guess_number_3,guess_number_4])()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Good job!&quot;</span>)<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-built_in">read</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="hljs-built_in">str</span>(flag))<br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-3"><a href="#È¢òËß£-3" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>MT19937ÔºåËøòÂ•ΩharryÊèêÈÜíÊàëÊèêÂâçÂ≠¶‰∫ÜÔºåËøô‰∏™È¢òÁúã‰∫Ü‰∏çÈöæ„ÄÇÊ≤°ÊúâÁéØÂ¢ÉÂ∞±Â§çÁé∞‰∏ç‰∫Ü‰∫Ü</p><h3 id="fake-MT"><a href="#fake-MT" class="headerlink" title="fake_MT"></a>fake_MT</h3><p>Ëøô‰∏™È¢ò‰∏ÄÊ†∑Ê≤°ÊúâÁéØÂ¢ÉÔºåË∑ü‰∏äÈù¢ÈÇ£‰∏™È¢òÂ∫îËØ•Â∑Æ‰∏çÂ§öÔºåÂÖ∑‰ΩìÂ≠¶‰π†ÂèØ‰ª•ÁúãÁúãMT19937</p><p>Â§ßÂÆ∂ÂèØ‰ª•ÁúãÁúãËøô‰∏§‰ΩçÂ∏àÂÇÖÁöÑÂçöÂÆ¢ÔºåÊàëÁöÑmt19937Ê≠£Âú®Êõ¥Êñ∞</p><p><a href="https://4xwi11.github.io/posts/2906a8ab/">20220522-DAS MAY Âá∫È¢ò‰∫∫ÊåëÊàòËµõ-CryptoSecWriteUp | 4XWi11‚Äôs Blog</a></p><p><a href="https://www.anquanke.com/post/id/205861#h3-9">ÊµÖÊûêMT19937‰º™ÈöèÊú∫Êï∞ÁîüÊàêÁÆóÊ≥ï-ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</a></p><p>ÊàëÂΩìÊó∂Â≠¶Ëøô‰∏™ÁúãÁöÑÂ∞±ÊòØËøô‰∏§ÁØáÊñáÁ´†ÔºåÂÖ∂‰ªñÁöÑÂ§™ÊùÇ‰∫ÜËôΩÁÑ∂‰πüÁúã‰∫Ü</p><h3 id="ez-polynomial"><a href="#ez-polynomial" class="headerlink" title="ez_polynomial"></a>ez_polynomial</h3><h4 id="È¢òÁõÆ-4"><a href="#È¢òÁõÆ-4" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#sage</span><br>from Crypto.Util.number import *<br>flag = list(bytearray(&#x27;&#x27;))<br>p = getPrime(16)<br>R.<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">y</span>&gt;</span></span> = PolynomialRing(GF(p))<br>while True:<br><span class="hljs-code">    P1 = R.random_element(degree=(ZZ.random_element(len(flag), 2*len(flag))))</span><br><span class="hljs-code">    Q1 = R.random_element(degree=(ZZ.random_element(len(flag), 2*len(flag))))</span><br><span class="hljs-code">    if P1.is_irreducible() and Q1.is_irreducible():</span><br><span class="hljs-code">        P = P1</span><br><span class="hljs-code">        Q = Q1</span><br><span class="hljs-code">        break</span><br><span class="hljs-code">e = 65537</span><br><span class="hljs-code">N = P*Q</span><br><span class="hljs-code">S.&lt;x&gt; = R.quotient(N)</span><br><span class="hljs-code">c = S(flag) ^ e</span><br><span class="hljs-code">print(&quot;P:&quot; + str(p) + &quot;\n&quot;)</span><br><span class="hljs-code">print(&quot;N:&quot; + str(N) + &quot;\n&quot;)</span><br><span class="hljs-code">print(&quot;C:&quot; + str(c))</span><br><span class="hljs-code"></span><br><span class="hljs-section">#P:40031</span><br><span class="hljs-section">#N:24096<span class="hljs-emphasis">*y^93 + 38785*</span>y^92 + 17489<span class="hljs-emphasis">*y^91 + 9067*</span>y^90 + 1034<span class="hljs-emphasis">*y^89 + 6534*</span>y^88 + 35818<span class="hljs-emphasis">*y^87 + 22046*</span>y^86 + 12887<span class="hljs-emphasis">*y^85 + 445*</span>y^84 + 26322<span class="hljs-emphasis">*y^83 + 37045*</span>y^82 + 4486<span class="hljs-emphasis">*y^81 + 3503*</span>y^80 + 1184<span class="hljs-emphasis">*y^79 + 38471*</span>y^78 + 8012<span class="hljs-emphasis">*y^77 + 36561*</span>y^76 + 19429<span class="hljs-emphasis">*y^75 + 35227*</span>y^74 + 10813<span class="hljs-emphasis">*y^73 + 26341*</span>y^72 + 29474<span class="hljs-emphasis">*y^71 + 2059*</span>y^70 + 16068<span class="hljs-emphasis">*y^69 + 31597*</span>y^68 + 14685<span class="hljs-emphasis">*y^67 + 9266*</span>y^66 + 31019<span class="hljs-emphasis">*y^65 + 6171*</span>y^64 + 385<span class="hljs-emphasis">*y^63 + 28986*</span>y^62 + 9912<span class="hljs-emphasis">*y^61 + 10632*</span>y^60 + 33741<span class="hljs-emphasis">*y^59 + 12634*</span>y^58 + 21179<span class="hljs-emphasis">*y^57 + 35548*</span>y^56 + 17894<span class="hljs-emphasis">*y^55 + 7152*</span>y^54 + 9440<span class="hljs-emphasis">*y^53 + 4004*</span>y^52 + 2600<span class="hljs-emphasis">*y^51 + 12281*</span>y^50 + 22<span class="hljs-emphasis">*y^49 + 17314*</span>y^48 + 32694<span class="hljs-emphasis">*y^47 + 7693*</span>y^46 + 6567<span class="hljs-emphasis">*y^45 + 19897*</span>y^44 + 27329<span class="hljs-emphasis">*y^43 + 8799*</span>y^42 + 36348<span class="hljs-emphasis">*y^41 + 33963*</span>y^40 + 23730<span class="hljs-emphasis">*y^39 + 27685*</span>y^38 + 29037<span class="hljs-emphasis">*y^37 + 14622*</span>y^36 + 29608<span class="hljs-emphasis">*y^35 + 39588*</span>y^34 + 23294<span class="hljs-emphasis">*y^33 + 757*</span>y^32 + 20140<span class="hljs-emphasis">*y^31 + 19511*</span>y^30 + 1469<span class="hljs-emphasis">*y^29 + 3898*</span>y^28 + 6630<span class="hljs-emphasis">*y^27 + 19610*</span>y^26 + 11631<span class="hljs-emphasis">*y^25 + 7188*</span>y^24 + 11683<span class="hljs-emphasis">*y^23 + 35611*</span>y^22 + 37286<span class="hljs-emphasis">*y^21 + 32139*</span>y^20 + 20296<span class="hljs-emphasis">*y^19 + 36426*</span>y^18 + 25340<span class="hljs-emphasis">*y^17 + 36204*</span>y^16 + 37787<span class="hljs-emphasis">*y^15 + 31256*</span>y^14 + 505<span class="hljs-emphasis">*y^13 + 27508*</span>y^12 + 20885<span class="hljs-emphasis">*y^11 + 32037*</span>y^10 + 31236<span class="hljs-emphasis">*y^9 + 7929*</span>y^8 + 27195<span class="hljs-emphasis">*y^7 + 28980*</span>y^6 + 11863<span class="hljs-emphasis">*y^5 + 16025*</span>y^4 + 16389<span class="hljs-emphasis">*y^3 + 570*</span>y^2 + 36547<span class="hljs-emphasis">*y + 10451</span></span><br><span class="hljs-emphasis"><span class="hljs-section">#C:3552*</span>x^92 + 6082<span class="hljs-emphasis">*x^91 + 25295*</span>x^90 + 35988<span class="hljs-emphasis">*x^89 + 26052*</span>x^88 + 16987<span class="hljs-emphasis">*x^87 + 12854*</span>x^86 + 25117<span class="hljs-emphasis">*x^85 + 25800*</span>x^84 + 30297<span class="hljs-emphasis">*x^83 + 5589*</span>x^82 + 23233<span class="hljs-emphasis">*x^81 + 14449*</span>x^80 + 4712<span class="hljs-emphasis">*x^79 + 35719*</span>x^78 + 1696<span class="hljs-emphasis">*x^77 + 35653*</span>x^76 + 13995<span class="hljs-emphasis">*x^75 + 13715*</span>x^74 + 4578<span class="hljs-emphasis">*x^73 + 37366*</span>x^72 + 25260<span class="hljs-emphasis">*x^71 + 28865*</span>x^70 + 36120<span class="hljs-emphasis">*x^69 + 7047*</span>x^68 + 10497<span class="hljs-emphasis">*x^67 + 19160*</span>x^66 + 17939<span class="hljs-emphasis">*x^65 + 14850*</span>x^64 + 6705<span class="hljs-emphasis">*x^63 + 17805*</span>x^62 + 30083<span class="hljs-emphasis">*x^61 + 2400*</span>x^60 + 10685<span class="hljs-emphasis">*x^59 + 15272*</span>x^58 + 2225<span class="hljs-emphasis">*x^57 + 13194*</span>x^56 + 14251<span class="hljs-emphasis">*x^55 + 31016*</span>x^54 + 10189<span class="hljs-emphasis">*x^53 + 35040*</span>x^52 + 7042<span class="hljs-emphasis">*x^51 + 29206*</span>x^50 + 39363<span class="hljs-emphasis">*x^49 + 32608*</span>x^48 + 38614<span class="hljs-emphasis">*x^47 + 5528*</span>x^46 + 20119<span class="hljs-emphasis">*x^45 + 13439*</span>x^44 + 25468<span class="hljs-emphasis">*x^43 + 30056*</span>x^42 + 19720<span class="hljs-emphasis">*x^41 + 21808*</span>x^40 + 3712<span class="hljs-emphasis">*x^39 + 25243*</span>x^38 + 10606<span class="hljs-emphasis">*x^37 + 16247*</span>x^36 + 36106<span class="hljs-emphasis">*x^35 + 17287*</span>x^34 + 36276<span class="hljs-emphasis">*x^33 + 1407*</span>x^32 + 28839<span class="hljs-emphasis">*x^31 + 8459*</span>x^30 + 38863<span class="hljs-emphasis">*x^29 + 435*</span>x^28 + 913<span class="hljs-emphasis">*x^27 + 36619*</span>x^26 + 15572<span class="hljs-emphasis">*x^25 + 9363*</span>x^24 + 36837<span class="hljs-emphasis">*x^23 + 17925*</span>x^22 + 38567<span class="hljs-emphasis">*x^21 + 38709*</span>x^20 + 13582<span class="hljs-emphasis">*x^19 + 35038*</span>x^18 + 31121<span class="hljs-emphasis">*x^17 + 8933*</span>x^16 + 1666<span class="hljs-emphasis">*x^15 + 21940*</span>x^14 + 25585<span class="hljs-emphasis">*x^13 + 840*</span>x^12 + 21938<span class="hljs-emphasis">*x^11 + 20143*</span>x^10 + 28507<span class="hljs-emphasis">*x^9 + 5947*</span>x^8 + 20289<span class="hljs-emphasis">*x^7 + 32196*</span>x^6 + 924<span class="hljs-emphasis">*x^5 + 370*</span>x^4 + 14849<span class="hljs-emphasis">*x^3 + 10780*</span>x^2 + 14035<span class="hljs-emphasis">*x + 15327</span></span><br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-4"><a href="#È¢òËß£-4" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>ÁÆÄÂçïÁöÑÂ§öÈ°πÂºèÊùøÂ≠êÈ¢òÔºåÁõ¥Êé•Ëß£Â∞±Ë°å</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># sage</span><br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><span class="hljs-attribute">p</span> = <span class="hljs-number">40031</span><br><span class="hljs-attribute">P</span> = PolynomialRing(Zmod(p), name = &#x27;x&#x27;)<br><span class="hljs-attribute">x</span> = P.gen()<br><span class="hljs-attribute">n</span>=<span class="hljs-number">24096</span>*x^<span class="hljs-number">93</span> + <span class="hljs-number">38785</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">17489</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">9067</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">1034</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">6534</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">35818</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">22046</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">12887</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">445</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">26322</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">37045</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">4486</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">3503</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">1184</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">38471</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">8012</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">36561</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">19429</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">35227</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">10813</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">26341</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">29474</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">2059</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">16068</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">31597</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">14685</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">9266</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">31019</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">6171</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">385</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">28986</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">9912</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">10632</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">33741</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">12634</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">21179</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">35548</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">17894</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">7152</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">9440</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">4004</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">2600</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">12281</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">22</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">17314</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">32694</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">7693</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">6567</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">19897</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">27329</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">8799</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">36348</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">33963</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">23730</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">27685</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">29037</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">14622</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">29608</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">39588</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">23294</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">757</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">20140</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">19511</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">1469</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">3898</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">6630</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">19610</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">11631</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">7188</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">11683</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">35611</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">37286</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">32139</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">20296</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">36426</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">25340</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">36204</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">37787</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">31256</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">505</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">27508</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">20885</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">32037</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">31236</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">7929</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">27195</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">28980</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">11863</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">16025</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">16389</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">570</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">36547</span>*x + <span class="hljs-number">10451</span><br><span class="hljs-attribute">c</span>=<span class="hljs-number">3552</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">6082</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">25295</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">35988</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">26052</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">16987</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">12854</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">25117</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">25800</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">30297</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">5589</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">23233</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">14449</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">4712</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">35719</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">1696</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">35653</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">13995</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">13715</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">4578</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">37366</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">25260</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">28865</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">36120</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">7047</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">10497</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">19160</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">17939</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">14850</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">6705</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">17805</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">30083</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">2400</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">10685</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">15272</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">2225</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">13194</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">14251</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">31016</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">10189</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">35040</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">7042</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">29206</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">39363</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">32608</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">38614</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">5528</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">20119</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">13439</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">25468</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">30056</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">19720</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">21808</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">3712</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">25243</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">10606</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">16247</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">36106</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">17287</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">36276</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">1407</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">28839</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">8459</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">38863</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">435</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">913</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">36619</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">15572</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">9363</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">36837</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">17925</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">38567</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">38709</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">13582</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">35038</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">31121</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">8933</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">1666</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">21940</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">25585</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">840</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">21938</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">20143</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">28507</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">5947</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">20289</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">32196</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">924</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">370</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">14849</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">10780</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">14035</span>*x + <span class="hljs-number">15327</span><br><span class="hljs-attribute">e</span>=<span class="hljs-number">65537</span><br><span class="hljs-attribute">q1</span>, q2 = n.factor()<br><span class="hljs-attribute">q1</span>, q2 = q1[<span class="hljs-number">0</span>], q2[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">phi</span> = (p**q1.degree() - <span class="hljs-number">1</span>) * (p**q2.degree() - <span class="hljs-number">1</span>)<br><span class="hljs-attribute">assert</span> gcd(e, phi) == <span class="hljs-number">1</span><br><span class="hljs-attribute">d</span> = inverse_mod(e, phi)<br><span class="hljs-attribute">m</span> = pow(c,d,n)<br><span class="hljs-attribute">flag</span> = bytes(m.coefficients())<br><span class="hljs-attribute">print</span>(flag)<br><span class="hljs-comment"># b&#x27;NKCTF&#123;We_HaV3_n0th1ng_But_dr3amS&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="eZ-Bl‚äïck"><a href="#eZ-Bl‚äïck" class="headerlink" title="eZ_Bl‚äïck"></a>eZ_Bl‚äïck</h3><h4 id="È¢òÁõÆ-5"><a href="#È¢òÁõÆ-5" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> Crypto<span class="hljs-selector-class">.Util</span><span class="hljs-selector-class">.strxor</span> import strxor as xor<br>import os<br><span class="hljs-selector-tag">from</span> secret import flag<br><br><br>def round(s, k):<br>    l, r = s[:<span class="hljs-number">16</span>], s[<span class="hljs-number">16</span>:]<br>    l_, r_ = <span class="hljs-built_in">xor</span>(<span class="hljs-built_in">xor</span>(r, k), l), l<br>    return l_ + r_<br><br><br>def <span class="hljs-built_in">encode</span>(s, k):<br>    t = s<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        t = <span class="hljs-built_in">round</span>(t, k[i])<br>    return t<br><br><br>r = os.<span class="hljs-built_in">urandom</span>(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(r)<br><br>key = [os.<span class="hljs-built_in">urandom</span>(<span class="hljs-number">16</span>) for _ in <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">encode</span>(r, key))<br>m = flag.<span class="hljs-built_in">strip</span>(b<span class="hljs-string">&#x27;NKCTF&#123;&#x27;</span>).<span class="hljs-built_in">strip</span>(b<span class="hljs-string">&#x27;&#125;&#x27;</span>).<span class="hljs-built_in">replace</span>(b<span class="hljs-string">&#x27;-&#x27;</span>, b<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">encode</span>(m, key))<br><br># b<span class="hljs-string">&quot;t\xf7\xaa\xac\x9d\x88\xa4\x8b\x1f+pA\x84\xacHg&#x27;\x07&#123;\xcc\x06\xc4i\xdd)\xda\xc9\xad\xa9\xe8\x1fi&quot;</span><br># b<span class="hljs-string">&quot;&#x27;&#123;&lt;z&#125;\x91\xda\xc5\xd5S\x8b\xfa\x9f~]J\x0f\xf4\x9a\x1e\xe0\xef\x129N\xe7a\x928+\xe0\xee&quot;</span><br># b<span class="hljs-string">&#x27;8\x1f&quot;\x83B4\x86)\xce\xebq3\x06\xa0w\x16U\x04M/w\xa1\x8f;)M\xdd~\x11:\xe3\xb3&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-5"><a href="#È¢òËß£-5" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>ÁÆÄÂçïÁöÑÂºÇÊàñ</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">from</span> <span class="hljs-title class_">Crypto</span>.<span class="hljs-property">Util</span>.<span class="hljs-property">number</span> <span class="hljs-keyword">import</span> <span class="hljs-operator">*</span><br><span class="hljs-variable">from</span> <span class="hljs-title class_">Crypto</span>.<span class="hljs-property">Util</span>.<span class="hljs-property">strxor</span> <span class="hljs-keyword">import</span> <span class="hljs-variable">strxor</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">xor</span><br><span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-variable">b</span><span class="hljs-string">&quot;t\xf7\xaa\xac\x9d<span class="hljs-char escape_">\x88</span>\xa4\x8b\x1f+pA<span class="hljs-char escape_">\x84</span>\xacHg&#x27;<span class="hljs-char escape_">\x07</span>&#123;\xcc<span class="hljs-char escape_">\x06</span>\xc4i\xdd)\xda\xc9\xad\xa9\xe8\x1fi&quot;</span><br><span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-variable">b</span><span class="hljs-string">&quot;&#x27;&#123;&lt;z&#125;<span class="hljs-char escape_">\x91</span>\xda\xc5\xd5S\x8b\xfa\x9f~]J\x0f\xf4\x9a\x1e\xe0\xef<span class="hljs-char escape_">\x12</span>9N\xe7a<span class="hljs-char escape_">\x92</span>8+\xe0\xee&quot;</span><br><span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-variable">b</span>&#x27;<span class="hljs-number">8</span>\<span class="hljs-variable">x1f</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x83</span>B4<span class="hljs-char escape_">\x86</span>)\xce\xebq3<span class="hljs-char escape_">\x06</span>\xa0w<span class="hljs-char escape_">\x16</span>U<span class="hljs-char escape_">\x04</span>M/w\xa1\x8f;)M\xdd~<span class="hljs-char escape_">\x11</span>:\xe3\xb3&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">r1 = r[:16]</span><br><span class="hljs-string">r2 = r[16:]</span><br><span class="hljs-string">key1 = xor(c1[:16], r2)</span><br><span class="hljs-string">key2 = xor(c1[16:], xor(r1, r2))</span><br><span class="hljs-string">m2 = xor(key1, c2[:16])</span><br><span class="hljs-string">m3 = xor(key2, c2[16:])</span><br><span class="hljs-string">m1 = xor(m2, m3)</span><br><span class="hljs-string">m = m1 + m2</span><br><span class="hljs-string">print(m)</span><br><span class="hljs-string"># b&#x27;1ccd5ceec96d4caf8ce59a512b3d0655&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="easy-high"><a href="#easy-high" class="headerlink" title="easy_high"></a>easy_high</h3><h4 id="È¢òÁõÆ-6"><a href="#È¢òÁõÆ-6" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>p, q = getPrime(1024), getPrime(1024)<br>N = p * q<br>p0 = p ^ (bytes_to_long(flag)&lt;&lt;444)<br>m = bytes_to_long(flag)<br>c = pow(m, 65537, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N=&#x27;</span>,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p0=&#x27;</span>,p0)<br><br><span class="hljs-comment">#c= 4881545863615247924697512170011400857004555681758106351259776881249360423774694437921554056529064037535796844084045263140567168171628832384672612945806728465127954937293787045302307135365408938448006548465000663247116917564500525499976139556325841597810084111303039525833367199565266613007333465332710833102978756654324956219855687611590278570749890543277201538208370370097424105751568285050703167350889953331829275262932104042040526209179357770495596739361176548337593674366015027648541293309465113202672923556991818236011769228078267484362980348613669012975963468592763463397575879215173972436831753615524193609612</span><br><span class="hljs-comment">#N= 17192509201635459965397076685948071839556595198733884616568925970608227408244870123644193452116734188924766414178232653941867668088060274364830452998991993756231372252367134508712447410029668020439498980619263308413952840568602285764163331028384281840387206878673090608323292785024372223569438874557728414737773416206032540038861064700108597448191546413236875600906013508022023794395360001242071569785940215873854748631691555516626235191098174739613181230094797844414203694879874212340812119576042962565179579136753839946922829803044355134086779223242080575811804564731938746051591474236147749401914216734714709281349</span><br><span class="hljs-comment">#p0= 149263925308155304734002881595820602641174737629551638146384199378753884153459661375931646716325020758837194837271581361322079811468970876532640273110966545339040194118880506352109559900553776706613338890047890747811129988585025948270181264314668772556874718178868209009192010129918138140332707080927643141811</span><br><br></code></pre></td></tr></table></figure><h4 id="È¢òËß£-6"><a href="#È¢òËß£-6" class="headerlink" title="È¢òËß£"></a>È¢òËß£</h4><p>È´ò‰Ωé‰ΩçÊîªÂáªÔºåÂèØ‰ª•Áü•ÈÅìÈ´ò‰ΩçÁöÑpÂíå‰Ωé‰ΩçÁöÑ444‰ΩçÔºåÂèØ‰ª•ËøõË°åÈ´ò‰Ωé‰ΩçÊîªÂáª</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># sage</span><br><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><span class="hljs-attribute">c</span>= <span class="hljs-number">6187845844052645335477666563187579997555293403110620879123121166924703361821847984760733842049752886698011561451715570810292323756091403783920480396052120046379755571530451812078574368413924390017994278703794257118954968480994077586245800902748815905644287545189605031883291488844527496906890127546594960138582150272568163575590734246290813150131949296550974206595456421136190026954855755623761557179760444906148376433584795779131477110538212742401420633087881506416368853221110426491868881029814841479615979710066371796507692025126150957315754738584387325388998533227577023142894876376702128870643448600352603905149</span><br><span class="hljs-attribute">N</span>= <span class="hljs-number">14195810221536708489210274086946022255792382922322850338983263099316341767896809249586174293795778082892237356582757544364274847341220303582304283372889068290282580493623042441421715338444710303281638639785784613434328659529884972238348336971186339482788748316527376410510261228354155806341136524162787121212184386900663470590652770503564816948407257603737938414126069053610568675347826390537145556511048774030823322301932088595499671755944744816524811272617200683384649389274196659297432212847319503330409792704612575414010711158873031786577877685578976140462539734553598745329712188216200905451774357282278403189943</span><br><span class="hljs-attribute">p0</span>= <span class="hljs-number">111984935426070810628244029907949697819351004665202173622240566580193974673163315128983603277856218378729883402496424467491406698035050254407170555432448523469880166015507303737468316933545613178461925283040643344197452758878116752692499745309765526523083790825015522124083482964296662782850606081657447935191</span><br><span class="hljs-attribute">e</span>=<span class="hljs-number">65537</span><br><span class="hljs-attribute">p_low</span>=p0-((p0&gt;&gt;<span class="hljs-number">444</span>)&lt;&lt;<span class="hljs-number">444</span>)<br><span class="hljs-attribute">p_high</span>=p0&gt;&gt;<span class="hljs-number">444</span>+<span class="hljs-number">432</span><br><span class="hljs-attribute">R</span>.&lt;x&gt;=Zmod(N)[]<br><span class="hljs-attribute">f</span>=(p_high&lt;&lt;<span class="hljs-number">444</span>+<span class="hljs-number">432</span>)+(<span class="hljs-number">2</span>**<span class="hljs-number">444</span>)*x+p_low<br><span class="hljs-comment"># print(f.monic().small_roots(X=2^432,beta=0.4,epsilon=0.02))</span><br><span class="hljs-comment"># x=5884672536404524134622271869104115667229940170376336917098024521488342346950674564557999895811555629084618277274191883351394678688</span><br><span class="hljs-attribute">x</span>=<span class="hljs-number">5884672536404524134622271869104115667229940170376336917098024521488342346950674564557999895811555629084618277274191883351394678688</span><br><span class="hljs-attribute">p</span>=(p_high&lt;&lt;<span class="hljs-number">444</span>+<span class="hljs-number">432</span>)+(<span class="hljs-number">2</span>**<span class="hljs-number">444</span>)*x+p_low<br><span class="hljs-attribute">q</span>=N//p<br><span class="hljs-attribute">d</span>=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-attribute">m</span>=pow(c,d,N)<br><span class="hljs-attribute">print</span>(long_to_bytes(int(m)))<br><span class="hljs-comment"># b&#x27;flag&#123;816b78c555fc864d2f521b13bc9d6e932e9f5cbe511112df&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="eZ-LargeCGÔºàÊú™Ëß£Ôºâ"><a href="#eZ-LargeCGÔºàÊú™Ëß£Ôºâ" class="headerlink" title="eZ_LargeCGÔºàÊú™Ëß£Ôºâ"></a>eZ_LargeCGÔºàÊú™Ëß£Ôºâ</h3><h4 id="È¢òÁõÆ-7"><a href="#È¢òÁõÆ-7" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, isPrime, bytes_to_long<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    primes = []<br>    p = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(primes) &lt; <span class="hljs-number">100</span>:<br>        p = next_prime(p)<br>        primes.append(<span class="hljs-built_in">int</span>(p))<br>    <span class="hljs-keyword">return</span> primes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genMyPrimeA</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        g = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> g &lt; <span class="hljs-number">2</span> ** bits:<br>            g *= random.choice(primes)<br>        g += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(g):<br>            <span class="hljs-keyword">return</span> g<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genMyPrimeB</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        g = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> g &lt; <span class="hljs-number">2</span> ** bits:<br>            g *= random.choice(primes)<br>        g -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(g):<br>            <span class="hljs-keyword">return</span> g<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">st, n, a, b, c, d</span>):<br>    A = [st + <span class="hljs-number">2023</span>, st + <span class="hljs-number">2024</span>, st + <span class="hljs-number">2025</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>**<span class="hljs-number">666</span>):<br>        A.append((a * A[-<span class="hljs-number">3</span>] + b * A[-<span class="hljs-number">2</span>] + c * A[-<span class="hljs-number">1</span>] + d) % n)<br>    <span class="hljs-keyword">return</span> A<br><br>primes = init()<br>p1 = getPrime(<span class="hljs-number">256</span>)<br><span class="hljs-built_in">print</span>(p1)<br>q1 = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> p1 &gt; q1:<br>    q1 = genMyPrimeA(<span class="hljs-number">256</span>)<br><span class="hljs-built_in">print</span>(q1)<br>p2 = getPrime(<span class="hljs-number">256</span>)<br>q2 = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> p2 &gt; q2:<br>    q2 = genMyPrimeB(<span class="hljs-number">256</span>)<br>n1 = p1 * q1<br>n2 = p2 * q2<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n1 = <span class="hljs-subst">&#123;n1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n2 = <span class="hljs-subst">&#123;n2&#125;</span>&#x27;</span>)<br><br>r = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><br>A = gen(bytes_to_long(flag), r, p1, q1, p2, q2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A[-3] = <span class="hljs-subst">&#123;A[-<span class="hljs-number">3</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A[-2] = <span class="hljs-subst">&#123;A[-<span class="hljs-number">2</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;A[-1] = <span class="hljs-subst">&#123;A[-<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-comment"># n1 = 39755206609675677517559022219519767646524455449142889144073217274247893104711318356648198334858966762944109142752432641040037415587397244438634301062818169</span><br><span class="hljs-comment"># n2 = 30725253491966558227957591684441310073288683324213439179377278006583428660031769862224980605664642101191616868994066039054762100886678504154619135365646221</span><br><span class="hljs-comment"># r = 7948275435515074902473978567170931671982245044864706132834233483354166398627204583162848756424199888842910697874390403881343013872330344844971750121043493</span><br><span class="hljs-comment"># A[-3] = 6085327340671394838391386566774092636784105046872311226269065664501131836034666722102264842236327898770287752026397099940098916322051606027565395747098434</span><br><span class="hljs-comment"># A[-2] = 1385551782355619987198268805270109182589006873371541520953112424858566073422289235930944613836387546298080386848159955053303343649615385527645536504580787</span><br><span class="hljs-comment"># A[-1] = 2529291156468264643335767070801583140819639532551726975314270127875306069067016825677707064451364791677536138503947465612206191051563106705150921639560469</span><br></code></pre></td></tr></table></figure><p>Ëøô‰∏™È¢òÊú™Ëß£Âá∫Êù•ÔºåÊúâÂ∏àÂÇÖÁúãÂà∞‰∫ÜÂèØ‰ª•‰∏éÊàëËÅîÁ≥ªÔºåÊàëÂÜçÂ≠¶‰π†‰∏Ä‰∏ã</p><h3 id="complex-matrixÔºàÊú™Ëß£Ôºâ"><a href="#complex-matrixÔºàÊú™Ëß£Ôºâ" class="headerlink" title="complex_matrixÔºàÊú™Ëß£Ôºâ"></a>complex_matrixÔºàÊú™Ëß£Ôºâ</h3><h4 id="È¢òÁõÆ-8"><a href="#È¢òÁõÆ-8" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gy<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><br>k = <span class="hljs-number">400</span><br>p, q = getPrime(<span class="hljs-number">741</span>), getPrime(<span class="hljs-number">741</span>)<br>N = p * q<br>phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>_flag = bytes_to_long(flag)<br>p, q = getPrime(<span class="hljs-number">1024</span>), getPrime(<span class="hljs-number">1024</span>)<br>d_array = [getPrime(k) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <br>e_array = [inverse(i, phi) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d_array]<br>c = <span class="hljs-built_in">pow</span>(_flag, <span class="hljs-number">65537</span>, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N:&#x27;</span>,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e:&#x27;</span>,e_array)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c:&#x27;</span>,c)<br><br><span class="hljs-comment">#N: 71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253</span><br><span class="hljs-comment">#e: [65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535, 58756559706647121529575085912021603170286163639572075337348109911506627489265537716060463072086480156516641723700802217411122982693536541892986623158818442274840863016647800896033363360822503445344748132842451806511693779600370832206455202293028402486647422212959763287987847280322100701242139127654031151565924132562837893975505159702015125483479126108892709063135006366792197127007229210558758401679638300464111782814561428899998471531067163715, 34828685390969672139784723764579499920301439564705391196519314224159563070870933754477650614819514127121146216049444888554338415587165719098661141454627820126445291802801256297252654045398330613075575527685542980264993711077876535643646746742646371967302159565887123638001580042027272379341650995728849759541960087953160211696369079708787543303742132161742979856720539914370868829868891655221361545648778590685232034703220732697083024449894197969, 26717968456600556973167180286909817773394160817933525240720067057464671317174201540556176814203780603153696663101158205367554829261808020426363683474848952397963507069306452835776851274959389849223566030857588019845781623271395012194869024566879791449466064832273531795430185178486425688475688634844530106740480643866537205900809400383304665727460014210405339697947582657505028211149470787536144302545259243549176816653560626044921521516818788487]</span><br><span class="hljs-comment">#c: 39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369</span><br></code></pre></td></tr></table></figure><p>Áü•ÈÅìËøô‰∏™ÊòØÊãìÂ±ïÁ∫≥Áª¥ÊîªÂáªÔºåÂõ†‰∏∫ÂéüÁêÜ‰∏çÊòØÂæàÊ∏ÖÊ•öÔºåÂ∞±Ê≤°ÊúâËß£‰∫Ü</p><h3 id="baby-classicalÔºàÊú™Ëß£Ôºâ"><a href="#baby-classicalÔºàÊú™Ëß£Ôºâ" class="headerlink" title="baby_classicalÔºàÊú™Ëß£Ôºâ"></a>baby_classicalÔºàÊú™Ëß£Ôºâ</h3><h4 id="È¢òÁõÆ-9"><a href="#È¢òÁõÆ-9" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">import</span><span class="hljs-built_in"> string</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>print(<span class="hljs-string">&#x27;flag length:&#x27;</span>,len(flag))<br>dic =<span class="hljs-built_in"> string</span>.ascii_uppercase<span class="hljs-built_in">+string</span>.ascii_lowercase<span class="hljs-built_in">+string</span>.digits+<span class="hljs-string">&#x27;+/&#x27;</span><br>f1nd = lambda x : dic.find(x)<br>class KeyEncryption:<br>    def __init_<span class="hljs-number">_</span>(self, m: int, fillchar: str=<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-built_in"> key</span>: np.ndarray=None):<br>        self.m = m<br>        self<span class="hljs-built_in">.key</span> =<span class="hljs-built_in"> key</span><br>        self.dicn2s = &#123;i: dic[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">64</span>)&#125;<br>        self.dics2n = dict(zip(self.dicn2s.values(), self.dicn2s.keys()))<br>        self.fillchar = self.dics2n[fillchar]<br>    def setM(self, m: int) -&gt; None:<br>        assert m &gt; <span class="hljs-number">0</span><br>        self.m = m<br>    def setKey(self,<span class="hljs-built_in"> key</span>: np.ndarray=None) -&gt; None:<br>        <span class="hljs-keyword">if</span><span class="hljs-built_in"> key</span> <span class="hljs-literal">is</span> None:<br>            while<span class="hljs-built_in"> key</span> <span class="hljs-literal">is</span> None <span class="hljs-keyword">or</span> KeyEncryption.modInv(np.linalg.det<span class="hljs-built_in">(key</span>)) == -<span class="hljs-number">1</span>:<br>               <span class="hljs-built_in"> key</span> = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">65</span>, size=(self.m, self.m))<br>            print(<span class="hljs-string">&quot;random matrixÔºö\n&quot;</span>,<span class="hljs-built_in"> key</span>)<br>        else:<br>            assert KeyEncryption.modInv(np.linalg.det<span class="hljs-built_in">(key</span>)) != -<span class="hljs-number">1</span><br>        self<span class="hljs-built_in">.key</span> =<span class="hljs-built_in"> key</span><br>    @staticmethod<br>    def modInv(x: int):<br>        y = <span class="hljs-number">0</span><br>        while y &lt; <span class="hljs-number">64</span>:<br>            y += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> (x * y) % <span class="hljs-number">64</span> == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> y<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    def _loopCrypt(self, long: np.ndarray, K: np.ndarray) -&gt; np.ndarray:<br>        ans = np.<span class="hljs-keyword">array</span>([])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(long.shape[<span class="hljs-number">0</span>] // self.m):<br>            ans = np.mod(np.hstack((<br>                ans, <br>                np.dot(long[i*self.m:i*self.m+self.m], K)<br>            )), <span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">return</span> ans.astype(np.int64)<br>    def encrypt(self, plaintext: np.ndarray):<br>        assert self.m !=None <span class="hljs-keyword">and</span> self<span class="hljs-built_in">.key</span> <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> None<br>        <span class="hljs-keyword">if</span> plaintext.shape[<span class="hljs-number">0</span>] % self.m:<br>            plaintext = np.hstack((<br>                plaintext, <br>                [self.fillchar] *(self.m - plaintext.shape[<span class="hljs-number">0</span>] % self.m)<br>            ))<br>        <span class="hljs-keyword">return</span> self._loopCrypt(plaintext, self<span class="hljs-built_in">.key</span>)<br>    def<span class="hljs-built_in"> translate</span>(self, s, to: str):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">to</span> == <span class="hljs-string">&quot;text&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join([self.dicn2s[si] <span class="hljs-keyword">for</span> si <span class="hljs-keyword">in</span> s])<br>        elif <span class="hljs-keyword">to</span> == <span class="hljs-string">&quot;num&quot;</span>:<br>            s = s<span class="hljs-built_in">.replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">return</span> np.<span class="hljs-keyword">array</span>([self.dics2n[si] <span class="hljs-keyword">for</span> si <span class="hljs-keyword">in</span> s])<br>def getKey<span class="hljs-built_in">(key</span>):<br>  he = KeyEncryption(m=<span class="hljs-number">3</span>)<br>  he.setKey()              <br>  nums = he<span class="hljs-built_in">.translate</span><span class="hljs-built_in">(key</span>, <span class="hljs-string">&quot;num&quot;</span>)<br>  res = he.encrypt(nums)<br>  enkey = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res.tolist())<br>  print(<span class="hljs-string">&#x27;Encrypt key:&#x27;</span>,enkey)<br>  <span class="hljs-keyword">return</span> enkey<br><span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  fir1 = <span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-keyword">map</span>(lambda <span class="hljs-number">_</span>:<span class="hljs-number">_</span>[::-<span class="hljs-number">1</span>],re.split(<span class="hljs-string">&quot;[ &#123; _ &#125; ]&quot;</span> , flag.swapcase())))<br>  ciphertext1 = <span class="hljs-string">&#x27;&#x27;</span><br> <span class="hljs-built_in"> key</span> = <span class="hljs-string">&quot;&quot;</span>  <br>  enkey = getKey<span class="hljs-built_in">(key</span>)<br>  _enkey=[f1nd(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span><span class="hljs-built_in"> key</span>]<br>  print(<span class="hljs-string">&#x27;key lengeh:&#x27;</span>,len(_enkey))<br>  j = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fir1:<br>    <span class="hljs-keyword">if</span> f1nd(i)&gt;=<span class="hljs-number">0</span>:<br>      ciphertext1 += dic[(f1nd(i) + _enkey[j % len(_enkey)])<span class="hljs-meta">%64</span>]<br>    else:<br>      ciphertext1 += i<br>    j += <span class="hljs-number">1</span><br>  ciphertext = ciphertext1<span class="hljs-built_in">.replace</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>)<br>  print(<span class="hljs-string">&#x27;ciphertext:%s&#123;%s&#125;&#x27;</span> % (ciphertext[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>],ciphertext[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>]))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag length: 48</span><br><span class="hljs-string">random matrixÔºö</span><br><span class="hljs-string"> [[13 37 10]</span><br><span class="hljs-string"> [15 17 41]</span><br><span class="hljs-string"> [13  0 10]]</span><br><span class="hljs-string">Encrypt key: pVvRe/G08rLhfwa</span><br><span class="hljs-string">key lengeh: 14</span><br><span class="hljs-string">ciphertext:1k2Pe&#123;24seBl4_a6Ot_fp7O1_eHk_Plg3EF_g/JtIonut4/&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>ÂêéÁª≠ÁªßÁª≠Âä†Ê≤πÂ≠¶ÔºåËøòÊúâËøô‰πàÂ§öÊ≤°ÊúâËß£ÂÜ≥ÔºåÈû≠Á≠ñ‰∏Ä‰∏ãËá™Â∑±ÔºåËøòÊòØÂ§™Ëèú‰∫ÜÔºåÂ∏åÊúõÊòéÂπ¥Ëøô‰∏™Êó∂ÂÄôÂèØ‰ª•akÊâÄÊúâÈ¢òÁõÆ</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Lcg</title>
    <link href="/2023/07/09/Lcg/"/>
    <url>/2023/07/09/Lcg/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RC4</title>
    <link href="/2023/07/08/RC4/"/>
    <url>/2023/07/08/RC4/</url>
    
    <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a><code>RC4</code></h1><h2 id="‰ªãÁªç"><a href="#‰ªãÁªç" class="headerlink" title="‰ªãÁªç"></a>‰ªãÁªç</h2><p>ÂØπ‰∫é<code>RC4</code>ÔºåÂÆÉÊòØ‰∏ÄÁßçÂØπÁß∞Âä†ÂØÜÁÆóÊ≥ïÔºåÂπ∂‰∏îÂÆÉÊòØ‰∏ÄÁßçÊµÅÂØÜÁ†ÅÔºåÂÆÉÁöÑÊòéÊñáÂíåÂØÜÈí•ÊµÅ‰∏ÄÊ†∑ÈïøÔºåÂØÜÈí•ÁöÑËØùÔºåÈïøÂ∫¶ÂèØ‰ª•‰∏∫1~256„ÄÇ‰ΩÜÊòØÂØÜÈí•ËøáÁü≠ÁöÑËØùÔºå‰ºöÂ§ßÂ§ßÈôç‰ΩéÂÆâÂÖ®ÊÄß,Âõ†Ê≠§Âª∫ËÆÆÊúÄÂ∞ë‰ΩøÁî®128‰ΩçÁöÑÂØÜÈí•ËøõË°åÂä†ÂØÜÔºåÂê¶ÂàôÂØÜÈí•ÊµÅ‰ºöÈáçÂ§çÔºåÈÄ†ÊàêÈöèÊú∫ÊÄßÂèò‰Ωé„ÄÇ</p><p>ÊµÅÂØÜÁ†ÅÊòØ‰∏Ä‰∏™ÊòéÊñáÂ≠óËäÇÂØπÂ∫î‰∏Ä‰∏™ÂØÜÈí•Â≠óËäÇËøõË°åÂºÇÊàñÊìç‰ΩúËøõË°åÂä†ÂØÜ„ÄÇËß£ÂØÜÁöÑËØù‰πüÊòØÂêåÊ†∑Â¶ÇÊ≠§ÔºåÂ¶ÇÊûú‰∏Ä‰∏™ÊòéÊñáËøõË°å‰∏§Ê¨°ÂºÇÊàñ‰ºöÂæóÂà∞ÂÆÉÊú¨Ë∫´(Â¶ÇÊûú‰∏ç‰ºöÁöÑËØùÔºåÂèØ‰ª•Âèñ‰∫ÜËß£‰∏Ä‰∏ãÂºÇÊàñÁöÑÊìç‰Ωú)„ÄÇ</p><h2 id="RC4ÁöÑÁõ∏ÂÖ≥ÂèòÈáè"><a href="#RC4ÁöÑÁõ∏ÂÖ≥ÂèòÈáè" class="headerlink" title="RC4ÁöÑÁõ∏ÂÖ≥ÂèòÈáè"></a><code>RC4</code>ÁöÑÁõ∏ÂÖ≥ÂèòÈáè</h2><p>**1.**ÂØÜÈí•ÊµÅ:ÊòéÊñáÁöÑÈïøÂ∫¶ÂíåÂØÜÈí•ÊµÅÁöÑÈïøÂ∫¶ÊòØÁõ∏ÂØπÂ∫îÁöÑÔºå‰æãÂ¶ÇÊòéÊñáÈïø500Â≠óËäÇÔºåÈÇ£‰πàÂØÜÈí•ÊµÅ‰πü‰ºöÈïø500Â≠óËäÇ„ÄÇÂØÜÈí•ÊµÅÁöÑÁîüÊàêÂèñÂÜ≥‰∫éÂØÜÈí•„ÄÇÂ¶ÇÊûúÂØÜÈí•Â∞è‰∫éÊòéÊñáÁöÑÈïøÂ∫¶ÔºåÈÇ£‰πàÂ∞±‰ºöÂæ™ÁéØË°•ÂÖÖÔºåÁõ¥Ëá≥ÂØÜÈí•ÊµÅÈïøÂ∫¶ËææÂà∞ÊòéÊñáÈïøÂ∫¶„ÄÇ‰æã: key&#x3D;‚Äô123‚Äô,ÊòéÊñáÈïø500ÔºåÈÇ£‰πàkey_stream&#x3D;‚Äô123123‚Ä¶..‚ÄôÔºåËøô‰∏™ÈïøÂ∫¶ÂíåÊòéÊñáÁöÑÈïøÂ∫¶Áõ∏Âêå„ÄÇ</p><p>2.Áä∂ÊÄÅÂêëÈáè<code>S</code>:<code>s[i]=i</code>,ÂàùÂßãÁöÑ<code>SÁõí</code>ÊòØ<code>S[0] = 0 , S[1] = 1 .....S[n]=n</code></p><p>3.‰∏¥Êó∂ÂêëÈáè<code>T</code>:<code>T[i] = K [i mod keylen]</code>(Ëøô‰∏™<code>keylen</code>ÁöÑÈïøÂ∫¶Á≠â‰∫éÂØÜÈí•ÁöÑÈïøÂ∫¶ÔºåËÄå‰∏çÊòØÂØÜÈí•ÊµÅÁöÑÈïøÂ∫¶)</p><h2 id="KSAÁÆóÊ≥ï"><a href="#KSAÁÆóÊ≥ï" class="headerlink" title="KSAÁÆóÊ≥ï"></a><code>KSA</code>ÁÆóÊ≥ï</h2><p>È¶ñÂÖàÁîüÊàê<code>SÁõí</code>ÔºåËøô‰∏™<code>SÁõí</code>ÊòØÂàùÂßãÁöÑ,ÂèØ‰ª•ÂèÇËÄÉ‰∏Ä‰∏ã‰∏ä‰∏Ä‰∏™Áä∂ÊÄÅÂêëÈáè<code>S</code>, Êé•ÁùÄÁîüÊàê<code>T</code>‰∏¥Êó∂ÂêëÈáèÔºå‰πüÂèØ‰ª•ÂèÇËÄÉ‰∏Ä‰∏ã‰∏äÈù¢ÁöÑ„ÄÇ</p><p>ÂØπ‰∫éÊòéÊñáÈïøÂ∫¶‰∏∫<code>n</code>ÁöÑÊó∂ÂÄôÔºåÂàùÂßã<code>j = 0</code>ÔºåÁÑ∂ÂêéÂØπ<code>i</code>ËøõË°å0Âà∞<code>n-1</code>ÁöÑÈÅçÂéÜ„ÄÇËÆ°ÁÆó<code>j = (j + S[i] + S[j]) mod n</code> ,ÁÑ∂ÂêéËøõË°å<code>S[i]</code>Âíå<code>S[j]</code>ÁöÑÂÄºËøõË°å‰∫íÊç¢„ÄÇ</p><h2 id="PRGAÁÆóÊ≥ï"><a href="#PRGAÁÆóÊ≥ï" class="headerlink" title="PRGAÁÆóÊ≥ï"></a><code>PRGA</code>ÁÆóÊ≥ï</h2><p>ÂØπ‰∫éÁªèËøá<code>KSA</code>ÁÆóÊ≥ïÂæóÂà∞ÁöÑ<code>SÁõí</code>ÔºåÊää<code>i</code>Âíå<code>j</code>ÂàùÂßãÂåñ‰∏∫ 0 ,ÂØπ<code>r = 0</code> ËøõË°å0~n-1ÁöÑÈÅçÂéÜ„ÄÇ</p><p><code>i = (i+1) mod n</code>    <code>j = (j+1) mod n</code> ÔºåÊØèÂæ™ÁéØ‰∏ÄÊ¨°Â∞±Ë¶ÅËøõË°å<code>S[i]</code>Âíå<code>S[j]</code>ÂÄºÁöÑ‰∫íÊç¢„ÄÇÂÖ∂‰∏≠<code>t=[S[i] + S[j]] mod n</code></p><p><code>K[r] = S[t]</code>.ÂæóÂà∞ÈïøÂ∫¶‰∏∫nÁöÑÂØÜÈí•ÊµÅ„ÄÇ</p><h2 id="ÂØπÊòéÊñáËøõË°åÂä†ÂØÜÂíåËß£ÂØÜ"><a href="#ÂØπÊòéÊñáËøõË°åÂä†ÂØÜÂíåËß£ÂØÜ" class="headerlink" title="ÂØπÊòéÊñáËøõË°åÂä†ÂØÜÂíåËß£ÂØÜ"></a>ÂØπÊòéÊñáËøõË°åÂä†ÂØÜÂíåËß£ÂØÜ</h2><p>Âõ†‰∏∫ÊòéÊñáÈïøÂ∫¶Á≠â‰∫éÂØÜÈí•ÊµÅÈïøÂ∫¶ÔºåÂàôÂèØËøõË°åÊØè‰∏Ä‰ΩçÁõ∏‰∫íÂØπÂ∫îÂºÇÊàñ</p><p>ÂØÜÊñá(<code>c</code>) &#x3D; <code>key ^ m </code></p><p>ÊòéÊñá(<code>m</code>) &#x3D; <code>key ^ c</code></p><h2 id="ÊÄªÁªì"><a href="#ÊÄªÁªì" class="headerlink" title="ÊÄªÁªì"></a>ÊÄªÁªì</h2><h3 id="RC4ÁâπÁÇπ"><a href="#RC4ÁâπÁÇπ" class="headerlink" title="RC4ÁâπÁÇπ"></a><code>RC4</code>ÁâπÁÇπ</h3><p>1.<code>RC4</code>ÁÆóÊ≥ïÁÆÄÂçïÔºåÊòì‰∫éÂÆûÁé∞„ÄÇ</p><p>2.ÁÆóÊ≥ïËøêË°åÈÄüÂ∫¶Âø´Ôºå‰æø‰∫éËøêÁÆó</p><p>3.ÂØÜÈí•ÁöÑÈïøÂ∫¶ÂèØÂèòÔºåÊòéÊñáÁöÑÈïøÂ∫¶‰∏∫n,ÂàôÂØÜÈí•ÁöÑÈïøÂ∫¶‰∏∫1~n</p><h3 id="RC4‰ª£Á†ÅÂÆûÁé∞"><a href="#RC4‰ª£Á†ÅÂÆûÁé∞" class="headerlink" title="RC4‰ª£Á†ÅÂÆûÁé∞"></a><code>RC4</code>‰ª£Á†ÅÂÆûÁé∞</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">KSA</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    ÂØÜÈí•Ë∞ÉÂ∫¶ÁÆóÊ≥ï</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_len]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># ‰∫§Êç¢S[i]ÂíåS[j]</span><br>    <span class="hljs-keyword">return</span> S<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRGA</span>(<span class="hljs-params">S, data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    ‰º™ÈöèÊú∫Â≠êÂØÜÁ†ÅÁîüÊàêÁÆóÊ≥ï</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    key = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># ‰∫§Êç¢S[i]ÂíåS[j]</span><br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        key.append(k ^ byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(key)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RC4</span>(<span class="hljs-params">key, data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    RC4Âä†ÂØÜÂíåËß£ÂØÜÂáΩÊï∞</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    S = KSA(key)<br>    <span class="hljs-keyword">return</span> PRGA(S, data)<br><br><br><span class="hljs-comment"># Á§∫‰æãÔºö‰ΩøÁî®RC4ÁÆóÊ≥ïÂä†ÂØÜÂíåËß£ÂØÜÂ≠óÁ¨¶‰∏≤</span><br>key = <span class="hljs-string">b&#x27;abcdefghijklmnop&#x27;</span><br>data = <span class="hljs-string">b&#x27;hello world&#x27;</span><br><span class="hljs-comment"># key=input()</span><br><span class="hljs-comment"># data=input()</span><br><span class="hljs-comment"># key=key.encode(&#x27;utf-8&#x27;)   </span><br><span class="hljs-comment"># data=data.encode(&#x27;utf-8&#x27;)</span><br><span class="hljs-comment"># ËøôÈáå‰∏∫ÂèØÈÄâÊã©Ëá™Â∑±ÊÉ≥Ë¶ÅËæìÂÖ•ÁöÑÊòéÊñáÂíåÂØÜÈí•</span><br>encrypted = RC4(key, data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Âä†ÂØÜÁªìÊûú:&#x27;</span>, encrypted)<br>decrypted = RC4(key, encrypted)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Ëß£ÂØÜÁªìÊûú:&#x27;</span>, decrypted)<br><span class="hljs-comment"># Âä†ÂØÜÁªìÊûú: b&#x27;\xc4\xa5/\xb1\xddf\x88t\x00\x8b[&#x27;</span><br><span class="hljs-comment"># Ëß£ÂØÜÁªìÊûú: b&#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="ÈÄªËæëÊÄùÁª¥Âõæ"><a href="#ÈÄªËæëÊÄùÁª¥Âõæ" class="headerlink" title="ÈÄªËæëÊÄùÁª¥Âõæ"></a>ÈÄªËæëÊÄùÁª¥Âõæ</h3><p>Ëøô‰∏™‰ªÖÈíàÂØπËøô‰∏™ÁÆóÊ≥ïÁúãÂÆå‰πãÂêéËøòÊúâ‰∫õÊ®°Á≥äÔºåÂèØ‰ª•Êù•Áúã‰∏Ä‰∏ãËøô‰∏™</p><p><img src="https://img-blog.csdnimg.cn/20210526103608999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2OTA1Mw==,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
