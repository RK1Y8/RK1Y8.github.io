<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RC4</title>
    <link href="/2023/07/08/RC4/"/>
    <url>/2023/07/08/RC4/</url>
    
    <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a><code>RC4</code></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>对于<code>RC4</code>，它是一种对称加密算法，并且它是一种流密码，它的明文和密钥流一样长，密钥的话，长度可以为1~256。但是密钥过短的话，会大大降低安全性,因此建议最少使用128位的密钥进行加密，否则密钥流会重复，造成随机性变低。</p><p>流密码是一个明文字节对应一个密钥字节进行异或操作进行加密。解密的话也是同样如此，如果一个明文进行两次异或会得到它本身(如果不会的话，可以取了解一下异或的操作)。</p><h2 id="RC4的相关变量"><a href="#RC4的相关变量" class="headerlink" title="RC4的相关变量"></a><code>RC4</code>的相关变量</h2><p>**1.**密钥流:明文的长度和密钥流的长度是相对应的，例如明文长500字节，那么密钥流也会长500字节。密钥流的生成取决于密钥。如果密钥小于明文的长度，那么就会循环补充，直至密钥流长度达到明文长度。例: key&#x3D;’123’,明文长500，那么key_stream&#x3D;’123123…..’，这个长度和明文的长度相同。</p><p>2.状态向量<code>S</code>:<code>s[i]=i</code>,初始的<code>S盒</code>是<code>S[0] = 0 , S[1] = 1 .....S[n]=n</code></p><p>3.临时向量<code>T</code>:<code>T[i] = K [i mod keylen]</code>(这个<code>keylen</code>的长度等于密钥的长度，而不是密钥流的长度)</p><h2 id="KSA算法"><a href="#KSA算法" class="headerlink" title="KSA算法"></a><code>KSA</code>算法</h2><p>首先生成<code>S盒</code>，这个<code>S盒</code>是初始的,可以参考一下上一个状态向量<code>S</code>, 接着生成<code>T</code>临时向量，也可以参考一下上面的。</p><p>对于明文长度为<code>n</code>的时候，初始<code>j = 0</code>，然后对<code>i</code>进行0到<code>n-1</code>的遍历。计算<code>j = (j + S[i] + S[j]) mod n</code> ,然后进行<code>S[i]</code>和<code>S[j]</code>的值进行互换。</p><h2 id="PRGA算法"><a href="#PRGA算法" class="headerlink" title="PRGA算法"></a><code>PRGA</code>算法</h2><p>对于经过<code>KSA</code>算法得到的<code>S盒</code>，把<code>i</code>和<code>j</code>初始化为 0 ,对<code>r = 0</code> 进行0~n-1的遍历。</p><p><code>i = (i+1) mod n</code>    <code>j = (j+1) mod n</code> ，每循环一次就要进行<code>S[i]</code>和<code>S[j]</code>值的互换。其中<code>t=[S[i] + S[j]] mod n</code></p><p><code>K[r] = S[t]</code>.得到长度为n的密钥流。</p><h2 id="对明文进行加密和解密"><a href="#对明文进行加密和解密" class="headerlink" title="对明文进行加密和解密"></a>对明文进行加密和解密</h2><p>因为明文长度等于密钥流长度，则可进行每一位相互对应异或</p><p>密文(<code>c</code>) &#x3D; <code>key ^ m </code></p><p>明文(<code>m</code>) &#x3D; <code>key ^ c</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="RC4特点"><a href="#RC4特点" class="headerlink" title="RC4特点"></a><code>RC4</code>特点</h3><p>1.<code>RC4</code>算法简单，易于实现。</p><p>2.算法运行速度快，便于运算</p><p>3.密钥的长度可变，明文的长度为n,则密钥的长度为1~n</p><h3 id="RC4代码实现"><a href="#RC4代码实现" class="headerlink" title="RC4代码实现"></a><code>RC4</code>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">KSA</span>(<span class="hljs-params">key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    密钥调度算法</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_len]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># 交换S[i]和S[j]</span><br>    <span class="hljs-keyword">return</span> S<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRGA</span>(<span class="hljs-params">S, data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    伪随机子密码生成算法</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    key = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># 交换S[i]和S[j]</span><br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        key.append(k ^ byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(key)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RC4</span>(<span class="hljs-params">key, data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    RC4加密和解密函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    S = KSA(key)<br>    <span class="hljs-keyword">return</span> PRGA(S, data)<br><br><br><span class="hljs-comment"># 示例：使用RC4算法加密和解密字符串</span><br>key = <span class="hljs-string">b&#x27;abcdefghijklmnop&#x27;</span><br>data = <span class="hljs-string">b&#x27;hello world&#x27;</span><br><span class="hljs-comment"># key=input()</span><br><span class="hljs-comment"># data=input()</span><br><span class="hljs-comment"># key=key.encode(&#x27;utf-8&#x27;)   </span><br><span class="hljs-comment"># data=data.encode(&#x27;utf-8&#x27;)</span><br><span class="hljs-comment"># 这里为可选择自己想要输入的明文和密钥</span><br>encrypted = RC4(key, data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密结果:&#x27;</span>, encrypted)<br>decrypted = RC4(key, encrypted)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密结果:&#x27;</span>, decrypted)<br><span class="hljs-comment"># 加密结果: b&#x27;\xc4\xa5/\xb1\xddf\x88t\x00\x8b[&#x27;</span><br><span class="hljs-comment"># 解密结果: b&#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="逻辑思维图"><a href="#逻辑思维图" class="headerlink" title="逻辑思维图"></a>逻辑思维图</h3><p>这个仅针对这个算法看完之后还有些模糊，可以来看一下这个</p><p><img src="https://img-blog.csdnimg.cn/20210526103608999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2OTA1Mw==,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/08/%E2%80%9C%E6%96%87%E7%AB%A0%E2%80%9D/"/>
    <url>/2023/07/08/%E2%80%9C%E6%96%87%E7%AB%A0%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="杨少"><a href="#杨少" class="headerlink" title="杨少"></a>杨少</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/08/%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/07/08/%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="星盟Crypto✌"><a href="#星盟Crypto✌" class="headerlink" title="星盟Crypto✌"></a>星盟Crypto✌</h1><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p><code>QQ：MTY3MDIyNzA1OA==</code></p><h2 id="孱弱子嗣，勿与论行"><a href="#孱弱子嗣，勿与论行" class="headerlink" title="孱弱子嗣，勿与论行"></a>孱弱子嗣，勿与论行</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
